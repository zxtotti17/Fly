{"pages":[{"title":"about-me","text":"","path":"about-me/index.html"},{"title":"categories","text":"","path":"categories/index.html"},{"title":"archives","text":"","path":"archives/index.html"},{"title":"tags","text":"","path":"tags/index.html"}],"posts":[{"title":"项目各种配置文件","text":"srpg.conf12345678910111213141516171819202122232425262728server &#123; listen 80; listen 443 ssl;# server_name alctwobt.ssl.91dena.cn; server_name alccn2-release.ssl.91dena.cn;# ssl on; ssl_certificate /root/cert/91dena_cn.pem; ssl_certificate_key /root/cert/91dena_cn.key; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Host $http_host; ## APP 11 location / &#123; # proxy proxy_pass http://127.0.0.1:5000/; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # connect to backend with keepalives proxy_http_version 1.1; proxy_set_header Connection \"\"; proxy_send_timeout 30s; proxy_read_timeout 60s; proxy_connect_timeout 30s; &#125; access_log /home/log/nginxlog/cnrelease/alccn2.ssl.91dena.cn.access.log main; error_log /home/log/nginxlog/cnrelease/alccn2.ssl.91dena.cn.error.log;&#125; 点击下载 nginx123456789101112131415161718192021222324252627282930user nginx;worker_processes auto;worker_rlimit_nofile 150000;error_log /tmp/error.log;events &#123; worker_connections 65535; multi_accept on ;&#125;http &#123; include mime.types; default_type application/octet-stream; log_format main '$remote_addr - $remote_user [$time_local] \"$request\" $request_time' ' $status $body_bytes_sent \"$http_referer\" ' '\"$http_user_agent\" \"$http_x_forwarded_for\" $upstream_response_time'; access_log /tmp/access.log; sendfile on; tcp_nopush on; keepalive_timeout 120; gzip on; include /etcinx/title/*.conf;&#125; 点击下载 srpg-app123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102#!/bin/bash### BEGIN INIT INFO# Provides: webapp# Required-Start: $syslog $remote_fs# Required-Stop: $syslog $remote_fs# Should-Start: $local_fs# Should-Stop: $local_fs# Default-Start: 2 3 4 5# Default-Stop: 0 1 6# Short-Description: Alchemist Webapp# Description: Alchemist Webapp### END INIT INFO#### BEGIN CHKCONFIG INFO# chkconfig: 2345 55 25# description: Alchemist Webapp### END CHKCONFIG INFOUSER=\"webapp\"NAME=\"webapp\"NODE_ENV=\"production\"NODE_BIN_DIR=\"/usr/localde/bin\"NODE_PATH=\"/usr/localdebde_modules\"APPLICATION_PATH=\"ar/webapps/alchemist/currentde/app/app.js\"APPLICATION_WORKDIR=\"ar/webapps/alchemist/currentde/app/\"APPLICATION_OPTION=\"\"LOGFILE=\"ar/webapps/alchemist/log/forever/app.log\"MIN_UPTIME=\"5000\"SPIN_SLEEP_TIME=\"10000\"PATH=$NODE_BIN_DIR:$PATHexport NODE_PATH=$NODE_PATHstart() &#123; echo `runuser -l \"$USER\" -c \"forever list\"` | grep -q \"$APPLICATION_PATH\" if [ \"$?\" -eq \"0\" ]; then echo \"$NAME is already running.\" RETVAL=0 else echo \"Starting $NAME\" runuser -l \"$USER\" -c \"\\ export NODE_ENV=$NODE_ENV &amp;&amp; forever \\ -a \\ -l $LOGFILE \\ --minUptime $MIN_UPTIME \\ --spinSleepTime $SPIN_SLEEP_TIME \\ --workingDir $APPLICATION_WORKDIR \\ start $APPLICATION_PATH $APPLICATION_OPTION\" 2&gt;&amp;1 &gt; /dev/null &amp; RETVAL=$? fi&#125;stop() &#123; echo `runuser -l \"$USER\" -c \"forever list\"` | grep -q \"$APPLICATION_PATH\" if [ \"$?\" -eq \"0\" ]; then echo \"Shutting down $NAME\" # Tell Forever to stop the process. runuser -l \"$USER\" -c \"forever stop $APPLICATION_PATH\" 2&gt;&amp;1 &gt; /dev/null RETVAL=$? else echo \"$NAME is not running.\" RETVAL=0 fi&#125;restart() &#123; stop start&#125;status() &#123; echo `runuser -l \"$USER\" -c \"forever list\"` | grep -q \"$APPLICATION_PATH\" if [ \"$?\" -eq \"0\" ]; then echo \"$NAME is running.\" RETVAL=0 else echo \"$NAME is not running.\" RETVAL=3 fi&#125;case \"$1\" in start) start ;; stop) stop ;; status) status ;; restart) restart ;; *) echo \"Usage: &#123;start|stop|status|restart&#125;\" exit 1 ;;esacexit $RETVAL 点击下载 td-agent123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138###### Output descriptions:### Treasure Data (http://www.treasure-data.com/) provides cloud based data# analytics platform, which easily stores and processes data from td-agent.# FREE plan is also provided.# @see http://docs.fluentd.org/articles/http-to-td## This section matches events whose tag is td.DATABASE.TABLE&lt;match td.*.*&gt; @type tdlog apikey YOUR_API_KEY auto_create_table buffer_type file buffer_path /var/log/td-agent/buffer/td &lt;secondary&gt; @type file path /var/log/td-agent/failed_records &lt;/secondary&gt;&lt;/match&gt;## match tag=debug.** and dump to console&lt;match debug.**&gt; @type stdout&lt;/match&gt;###### Source descriptions:#### built-in TCP input## @see http://docs.fluentd.org/articles/in_forward&lt;source&gt; @type forward&lt;/source&gt;## built-in UNIX socket input#&lt;source&gt;# @type unix#&lt;/source&gt;# HTTP input# POST http://localhost:8888/&lt;tag&gt;?json=&lt;json&gt;# POST http://localhost:8888/td.myapp.login?json=&#123;\"user\"%3A\"me\"&#125;# @see http://docs.fluentd.org/articles/in_http&lt;source&gt; @type http port 8888&lt;/source&gt;## live debugging agent&lt;source&gt; @type debug_agent bind 127.0.0.1 port 24230&lt;/source&gt;###### Examples:#### File input## read apache logs continuously and tags td.apache.access#&lt;source&gt;# @type tail# format apache# path /var/log/httpd-access.log# tag td.apache.access#&lt;/source&gt;## File output## match tag=local.** and write to file#&lt;match local.**&gt;# @type file# path /var/log/td-agent/access#&lt;/match&gt;## Forwarding## match tag=system.** and forward to another td-agent server#&lt;match system.**&gt;# @type forward# host 192.168.0.11# # secondary host is optional# &lt;secondary&gt;# host 192.168.0.12# &lt;/secondary&gt;#&lt;/match&gt;## Multiple output## match tag=td.*.* and output to Treasure Data AND file#&lt;match td.*.*&gt;# @type copy# &lt;store&gt;# @type tdlog# apikey API_KEY# auto_create_table# buffer_type file# buffer_path /var/log/td-agent/buffer/td# &lt;/store&gt;# &lt;store&gt;# @type file# path /var/log/td-agent/td-%Y-%m-%d/%H.log# &lt;/store&gt;#&lt;/match&gt;#&lt;match *.**&gt;# type file# path /var/log/td-agent/error.log#&lt;/match&gt;&lt;match alchemist.**&gt; type forward heartbeat_type tcp buffer_type file buffer_path /var/tmp/td-agent/forward.*.buffer buffer_chunk_limit 8m # チャンクサイズ buffer_queue_limit 256 # 1queueに保存できるchunk数の上限 flush_interval 1s # 10秒に1回送信 flush_at_shutdown true # シャットダウン時にチャンクを処理するか?(ファイルバッファのみ有効) retry_wait 5s # 再送実施までの待ち時間 retry_limit 2 # 再送実施回数 require_ack_response true expire_dns_cache 0 dns_round_robin true &lt;server&gt; host mongodb.alccn.91dena.cn port 24224 &lt;/server&gt; # ログ送信失敗時のファイル # # &lt;secondary&gt; # # type file # # path /var/log/td-agent/failed/forward-failed # #&lt;/secondary&gt; &lt;/match&gt; 点击下载","path":"2018/07/31/项目各种配置文件/"},{"title":"ALC_Sentry","text":"1) 安装环境执行命令创建名为sentry的数据库createdb -E utf-8 sentry为sentry项目初始化数据sentry –config=~/.sentry/sentry.conf.py upgrade创建新用户sentry –config=~/.sentry/sentry.conf.py createuser然后就可以启动服务了sentry –config=~/.sentry/sentry.conf.py start另外，还需要启动Workersentry –config=~/.sentry/sentry.conf.py celery worker -B假设web服务器端口是9000，那么访问localhost:9000就能开始使用sentry了！ source /usr/local/vir-sentry/bin/activatesentry –config=~/.sentry/sentry.conf.py start &gt;&gt; /usr/local/vir-sentry/logs/sentry.log 2&gt;&amp;1 &amp; 2）相关命令2.1启动su - webappsource /usr/local/vir-sentry/bin/activatesupervisord -c /etc/supervisord.confsupervisorctl start all2.2关闭命令su - webappsource /usr/local/vir-sentry/bin/activatesupervisorctl stop allkillall supervisord *创建账号 sentry createuser3)基于node的测试demoraven-node-master.zip 4.）界面显示 web 服务器相关配置","path":"2018/07/24/ALC-Sentry/"},{"title":"alchemist_manage服务器部署","text":"manage服务器代码上传copy srpg_too 目录到 /var/webapps/alchemist_mnt (文件所有者必须为webapp) ruby运行环境构建2.1 检查依赖-ruby(v2.2.2p95~)-gem bundle-Node.js-npm-bower-msyql-redis2.1 设置gem源为淘宝源Gemfile （描述gem之间依赖文件）需要如下修改source ‘https://gems.ruby-china.org/&#39;2.2 安装gem filesu - webappbundle install2.2.1 安装bundle 命令不存在，。gem install bundle2.2.2 提示gem命令不存在，就执行rbenv global 2.2.2， 如果无法运行就重新安装ruby 2.2.2 版本，流程如下su - webappgit clone https://github.com/rbenv/rbenv.git ~/.rbenvcd ~/.rbenv &amp;&amp; src/configure &amp;&amp; make -C srcecho ‘export PATH=”$HOME/.rbenv/bin:$PATH”‘ &gt;&gt; ~/.bash_profile~/.rbenv/bin/rbenv initecho ‘eval “$(rbenv init -)”‘ &gt;&gt; ~/.bash_profilesource ~/.bash_profilegit clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-buildrbenv install 2.2.2rbenv global 2.2.2ruby -v Cap环境部署3.1 配置SSH无密码登录配置config/deploy/produciton.rb ssh无密码登陆（id_rsa.pub和authorized_keys） 设置authorized_keys，记得chmod 600，否则无法生效）3.1.1 生成sshkey:cd ~/.sshssh-keygen输入公钥名：id_rsa3.1.2 配置authorized_keyscat id_rsa.pub &gt;&gt; authorized_keyschmod -R 600 authorized_keyschmod 700 ~/.ssh备注：如果还是无法实现无密码登录，再清空下~/.ssh/koown_hosts文件（echo “” &gt; ~/.sshown_hosts);3.1.3执行以下deploy命令：production环境为例cd currentbundle exec cap production mkdir:socketsbundle exec cap production bower:install4.前端bower模块安装4.1 Node.js 安装bowernpm install -g bower –registry=https://registry.npm.taobao.org (-g不一定要)4.2install Bowerfile bundle exec rake bower:install4.3 manage server DB构建bundle exec rake maint:create maint:migrate 4.4 添加管理账号 bundle exec rake maint:seed 4.5 配置crontab 缺少crontab 会影响预约奖励发放 cd 根目录（current/） gem install whenever ，检查config/schedule.rb是否存在 whenever -w（写入到crontab 中） 查看log/cron_log.log日志是否已生成。","path":"2018/07/11/alchemist-manage服务器部署/"},{"title":"hexo 常用笔记","text":"建站的过程网上一大把就不记录了，主要写下遇到的几个问题 github上的项目名称一定要和自己在github上的用户名一致，否则会生成静态文件后点开会白屏 多看看官方手册上面有详细记录https://hexo.io/zh-cn/docs hexo g -dhexo cleanhexo shexo目录下执行这样一句话npm install hexo-asset-image –save，这是下载安装一个可以上传本地图片的插件,再运行hexo n “xxxx”来生成md博文","path":"2018/07/03/hexo-安装遇到的问题/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","path":"2018/06/15/hello-world/"}]}